<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dplyr on The Amateur Data Scientist</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in Dplyr on The Amateur Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multiple Columns to Multiple Colums at Once</title>
      <link>/post/multiple-columns-data-table/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/multiple-columns-data-table/</guid>
      <description>1 Bad First Impression2 Stuck on a Simulation Problem3 Different Ways to Simulate3.1 {dplyr} Attempt3.2 {dplyr} with {purrr} Attempt4 Life (in R) Changing Conversation4.1 {data,table} with {purrr} Attempt4.2 {data.table} Row wise4.3 {base} R Alternative5 Change of Mindset6 CodeReferences# Attach packages and set chunk optionsxfun::pkg_attach(&amp;quot;knitr&amp;quot;,&amp;quot;DT&amp;quot;,&amp;quot;data.table&amp;quot;,&amp;quot;dplyr&amp;quot;,&amp;quot;purrr&amp;quot;)opts_chunk$set(message = FALSE,warning = FALSE,echo = TRUE)# create standard datatable function to be used in all tables in this postshow_datatable &amp;lt;- function(data) {data %&amp;gt;% DT::datatable(rownames = FALSE,extensions = &amp;#39;FixedColumns&amp;#39;,options = list(pageLength = 20,scrollX = TRUE,scrollCollapse = TRUE,columnDefs = list(list(className = &amp;#39;dt-center&amp;#39;,targets = 0:(ncol(data) - 1)))))}1 Bad First ImpressionWhen I first tried to learn {data.</description>
    </item>
    
    <item>
      <title>From Messy to Tidy: Identify and Split Based on Geographic Scope</title>
      <link>/post/messy-tidy-identify-split-geographic-scope/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/messy-tidy-identify-split-geographic-scope/</guid>
      <description>1 Partially Tidy Data Sets2 Philippine Geography Crash Course3 Geography Challenge3.1 Location Level3.2 Region Tags3.3 Split and Save4 Up Next5 Code6 References1 Partially Tidy Data SetsSo far, we have converted the messy Philippine Consumer Price Index data to a partially tidy data. We did this by collecting the date columns into one column, adapting the dates into ISO 8601 format, interpreting the code column into more meaningful item descriptions, and separating the data by item level.</description>
    </item>
    
    <item>
      <title>From Messy to Tidy: Separate the Category</title>
      <link>/post/messy-tidy-separate-category/</link>
      <pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/messy-tidy-separate-category/</guid>
      <description>1 Dates in One Column2 Deciphering the Code Column3 Split, Stretch, and Trickle Down3.1 Cut the Dots3.2 Count the Dots3.3 Spread the Categories3.4 Pull the One Above4 Join and Split5 Up Next6 Code7 References1 Dates in One ColumnThe first post in the From Messy to Tidy series introduced us to the idea of tidy data (Wickham 2014):</description>
    </item>
    
    <item>
      <title>From Messy to Tidy: Gather All Those Dates</title>
      <link>/post/messy-tidy-tidyr-gather/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/messy-tidy-tidyr-gather/</guid>
      <description>1 Tidy Data: Long But Machine Readable2 Consumer Price Index of the Philippines3 Messy Data Cues3.1 Wide not Long3.2 Dates as Columns3.3 Average Columns4 Short Steps to a Long Table4.1 Remove Columns with Names that Starts with the Same Characters4.2 Gather the Date Columns4.3 Convert to YYYY-MM-DD5 Not Yet Tidy, A Little Less Messy6 Up Next7 Code8 References1 Tidy Data: Long But Machine ReadableWorking with data made me conscious of how we compile, store, and share data.</description>
    </item>
    
  </channel>
</rss>